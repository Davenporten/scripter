#!/usr/bin/env python

from time import strftime
from classes import tags
from shutil import copyfile

import pypandoc
import argparse


def _parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('-o', '--dest', type=str, default='.' + strftime('%Y%m%d_%H%M%S') + '.pdf', help='The path to the pdf file that will be generated.')
    parser.add_argument('file', type=str, default='the.script', help='Path to scripter file.')

    return parser.parse_args()

def _tag_switch(label):
    label = label.lower()
    return {
        'title': '<div class="header" style="text-align:center; font-size:50px"><p>',
        'author': '<div class="center"><p>written by\n\n',
        'end': '</p></div>'

    }.get(label, '<div><p>')

def _parse_head(file, dest_md):

    copyfile('aux_files/style', dest_md)

    headers = []
    
    t = tags.tags()

    for line in file:
        if t.script_term in line:
            break
        headers.append(line)
        print(line)

    print(headers)

    with open(dest_md, 'a') as dest:
        for h in headers:
            if ':' in h:
                label,txt = h.split(':')
                txt = txt.strip()
                h_tags = _tag_switch(label)
                if(h_tags):
                    dest.write(_tag_switch(label))
                    dest.write(txt)
                    dest.write(_tag_switch('end'))

    return

def _parse_script(file, dest_md):
    return

def generate_markdown(file, dest):

    f = open(file)
    d_mark = dest.replace('pdf', 'md', -1)
#    d = open(d_mark, 'w')

    _parse_head(f, d_mark)

#    _parse_script(f, d)
    
    f.close()
#    d.close()
    return d_mark

def generate_pdf(md_path):
    return

if __name__ == '__main__':
    args = _parse_args();
    md_path = generate_markdown(args.file, args.dest);
    generate_pdf(md_path)
